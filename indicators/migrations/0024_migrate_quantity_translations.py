# Generated by Django 3.0.6 on 2020-05-18 12:06

from django.db import migrations
from django.conf import settings
from django.core.exceptions import ObjectDoesNotExist


def _get_translation(obj, kls):
    translations = kls.objects.filter(master_id=obj.pk)
    try:
        # Try default translation
        return translations.get(language_code=settings.LANGUAGE_CODE)
    except ObjectDoesNotExist:
        try:
            # Try default language
            return translations.get(language_code=settings.PARLER_DEFAULT_LANGUAGE_CODE)
        except ObjectDoesNotExist:
            # Maybe the object was translated only in a specific language?
            # Hope there is a single translation
            return translations.get()


def forwards_func(apps, schema_editor):
    Quantity = apps.get_model('indicators', 'Quantity')
    QuantityTranslation = apps.get_model('indicators', 'QuantityTranslation')

    for obj in Quantity.objects.all():
        QuantityTranslation.objects.create(
            master_id=obj.pk,
            language_code=settings.LANGUAGE_CODE,
            name=obj.name_old
        )


def backwards_func(apps, schema_editor):
    Quantity = apps.get_model('indicators', 'Quantity')
    QuantityTranslation = apps.get_model('indicators', 'QuantityTranslation')

    for obj in Quantity.objects.all():
        translation = _get_translation(obj, QuantityTranslation)
        obj.name_old = translation.name
        obj.save()


class Migration(migrations.Migration):

    dependencies = [
        ('indicators', '0023_make_quantity_translatable'),
    ]

    operations = [
        migrations.RunPython(forwards_func, backwards_func),
    ]
